
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorials/class_averaging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorials_class_averaging.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorials_class_averaging.py:


Class Averaging
===============

We demonstrate class averaging using the rotationally invariant
representation algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 8-22

.. code-block:: default


    import logging

    import matplotlib.pyplot as plt
    import numpy as np
    from PIL import Image as PILImage

    from aspire.denoising import DebugClassAvgSource, DefaultClassAvgSource
    from aspire.noise import WhiteNoiseAdder
    from aspire.source import ArrayImageSource  # Helpful hint if you want to BYO array.
    from aspire.utils import gaussian_2d

    logger = logging.getLogger(__name__)








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Build Simulated Data
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 27-29

Circular 2D Gaussian Image
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: default


    L = 100
    round_disc = gaussian_2d(L, sigma=L / 4)
    plt.imshow(round_disc, cmap="gray")
    plt.show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_001.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 36-38

Oval 2D Gaussian Image
^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 38-43

.. code-block:: default


    oval_disc = gaussian_2d(L, sigma=(L / 20, L / 5))
    plt.imshow(oval_disc, cmap="gray")
    plt.show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_002.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-48

Handed Image
^^^^^^^^^^^^

Create richer test set by including an asymmetric image.

.. GENERATED FROM PYTHON SOURCE LINES 48-58

.. code-block:: default


    # Create a second oval.
    oval_disc2 = gaussian_2d(L, mu=(L / 5, L / 6), sigma=(L / 15, L / 20))

    # Strategically add it to `oval_disc`.
    yoval_discL = oval_disc.copy()
    yoval_discL += oval_disc2
    plt.imshow(yoval_discL, cmap="gray")
    plt.show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_003.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-63

Reflected Image
^^^^^^^^^^^^^^^

Also include the reflection of  the asymmetric image.

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: default


    yoval_discR = np.flipud(yoval_discL)
    plt.imshow(yoval_discR, cmap="gray")
    plt.show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_004.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-74

Example Data Set Source
^^^^^^^^^^^^^^^^^^^^^^^

We concatenate and shuffle 512 rotations of the Gaussian images
above to create our data set.

.. GENERATED FROM PYTHON SOURCE LINES 74-103

.. code-block:: default


    # How many entries (angles) in our stack
    N = 512
    thetas = np.linspace(start=0, stop=360, num=N, endpoint=False)

    classRound = np.zeros((N, L, L))
    classOval = np.zeros((N, L, L))
    classYOvalL = np.zeros((N, L, L))
    classYOvalR = np.zeros((N, L, L))

    for i, theta in enumerate(thetas):
        classRound[i] = np.asarray(PILImage.fromarray(round_disc).rotate(theta))
        classOval[i] = np.asarray(PILImage.fromarray(oval_disc).rotate(theta))
        classYOvalL[i] = np.asarray(PILImage.fromarray(yoval_discL).rotate(theta))
        classYOvalR[i] = np.asarray(PILImage.fromarray(yoval_discR).rotate(theta))

    # We'll make an example data set by concatentating then shuffling
    # these.
    example_array = np.concatenate((classRound, classOval, classYOvalL, classYOvalR))
    np.random.seed(1234567)
    np.random.shuffle(example_array)

    # So now that we have cooked up an example dataset, lets create an
    # ASPIRE source
    src = ArrayImageSource(example_array)

    # Let's peek at the images to make sure they're shuffled up nicely
    src.images[:10].show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_005.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 104-117

Basic Class Average
-------------------

This first example uses the ``DebugClassAvgSource`` to classify
images via the rotationally invariant representation
(``RIRClass2D``) algorithm.  ``DebugClassAvgSource`` internally uses
``TopClassSelector`` by default.  ``TopClassSelector``
deterministically selects the first ``n_classes``.
``DebugClassAvgSource`` also uses brute force rotational alignment
without shifts.  These simplifications are useful for development
and debugging.  Later we will discuss the more general
``ClassAvgSource`` and the modular components that are more suitable
to simulations and experimental datasets.

.. GENERATED FROM PYTHON SOURCE LINES 117-124

.. code-block:: default


    avgs = DebugClassAvgSource(
        src=src,
        n_nbor=10,
        num_procs=1,  # Change to "auto" if your machine has many processors
    )








.. GENERATED FROM PYTHON SOURCE LINES 125-129

.. note:
    ``ClassAvgSource``s are lazily evaluated.
    They will generally compute the classifications, selections,
    and serve averaged results on request using the `.images[...]`.

.. GENERATED FROM PYTHON SOURCE LINES 132-135

Display Classes
^^^^^^^^^^^^^^^
Now we will request the first 10 images and display them.

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default


    avgs.images[:10].show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_006.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/4 [00:00<?, ?it/s]     50%|#####     | 2/4 [00:00<00:00, 13.80it/s]    100%|##########| 4/4 [00:00<00:00, 13.92it/s]    100%|##########| 4/4 [00:00<00:00, 13.89it/s]
      0%|          | 0/4 [00:00<?, ?it/s]     25%|##5       | 1/4 [00:00<00:00,  4.61it/s]     50%|#####     | 2/4 [00:00<00:00,  4.62it/s]     75%|#######5  | 3/4 [00:00<00:00,  4.65it/s]    100%|##########| 4/4 [00:00<00:00,  4.68it/s]    100%|##########| 4/4 [00:00<00:00,  4.66it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:00<00:03,  2.96it/s]     20%|##        | 2/10 [00:00<00:02,  2.96it/s]     30%|###       | 3/10 [00:01<00:02,  2.97it/s]     40%|####      | 4/10 [00:01<00:01,  3.02it/s]     50%|#####     | 5/10 [00:01<00:01,  3.01it/s]     60%|######    | 6/10 [00:02<00:01,  3.00it/s]     70%|#######   | 7/10 [00:02<00:01,  2.99it/s]     80%|########  | 8/10 [00:02<00:00,  2.98it/s]     90%|######### | 9/10 [00:03<00:00,  3.00it/s]    100%|##########| 10/10 [00:03<00:00,  3.03it/s]    100%|##########| 10/10 [00:03<00:00,  3.01it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     30%|###       | 3/10 [00:00<00:00, 21.36it/s]     60%|######    | 6/10 [00:00<00:00, 21.65it/s]     90%|######### | 9/10 [00:00<00:00, 21.76it/s]    100%|##########| 10/10 [00:00<00:00, 21.69it/s]




.. GENERATED FROM PYTHON SOURCE LINES 139-141

Class Averaging with Noise
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 143-145

Add Noise to Data Set
^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 145-163

.. code-block:: default


    # Using the sample variance, we'll compute a target noise variance
    # Noise
    var = np.var(src.images[:].asnumpy())
    noise_var = var * 2**4

    # Then create noise with the ``WhiteNoiseAdder`` class.
    noise = WhiteNoiseAdder(var=noise_var, seed=123)

    # Add noise to the images by performing ``forward``
    noisy_im = noise.forward(src.images[:])

    # Recast as an ASPIRE source
    noisy_src = ArrayImageSource(noisy_im)

    # Let's peek at the noisey images
    noisy_src.images[:10].show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_007.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-167

RIR with Noise
^^^^^^^^^^^^^^
Here we will use the noise_src.

.. GENERATED FROM PYTHON SOURCE LINES 167-174

.. code-block:: default


    avgs = DebugClassAvgSource(
        src=noisy_src,
        n_nbor=10,
        num_procs=1,  # Change to "auto" if your machine has many processors
    )








.. GENERATED FROM PYTHON SOURCE LINES 175-183

Display Classes
^^^^^^^^^^^^^^^
Here, on request for images, the class average source will classify,
select, and average images.  All this occurs inside the
``ClassAvgSource`` components.  When using more advanced class
average sources, the images are remapped by the `selector`.  In this
case, using ``DebugClassAvgSource`` the first 10 images will simply
correspond to the first ten from ``noise_src``.

.. GENERATED FROM PYTHON SOURCE LINES 183-187

.. code-block:: default


    avgs.images[:10].show()





.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_008.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/4 [00:00<?, ?it/s]     50%|#####     | 2/4 [00:00<00:00, 13.78it/s]    100%|##########| 4/4 [00:00<00:00, 13.82it/s]    100%|##########| 4/4 [00:00<00:00, 13.80it/s]
      0%|          | 0/4 [00:00<?, ?it/s]     25%|##5       | 1/4 [00:00<00:00,  5.03it/s]     50%|#####     | 2/4 [00:00<00:00,  5.19it/s]     75%|#######5  | 3/4 [00:00<00:00,  5.29it/s]    100%|##########| 4/4 [00:00<00:00,  5.35it/s]    100%|##########| 4/4 [00:00<00:00,  5.29it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:00<00:03,  3.00it/s]     20%|##        | 2/10 [00:00<00:02,  2.99it/s]     30%|###       | 3/10 [00:00<00:02,  3.01it/s]     40%|####      | 4/10 [00:01<00:01,  3.02it/s]     50%|#####     | 5/10 [00:01<00:01,  3.00it/s]     60%|######    | 6/10 [00:01<00:01,  3.00it/s]     70%|#######   | 7/10 [00:02<00:01,  2.99it/s]     80%|########  | 8/10 [00:02<00:00,  2.96it/s]     90%|######### | 9/10 [00:03<00:00,  2.96it/s]    100%|##########| 10/10 [00:03<00:00,  2.98it/s]    100%|##########| 10/10 [00:03<00:00,  2.99it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     30%|###       | 3/10 [00:00<00:00, 21.46it/s]     60%|######    | 6/10 [00:00<00:00, 21.67it/s]     90%|######### | 9/10 [00:00<00:00, 21.94it/s]    100%|##########| 10/10 [00:00<00:00, 21.85it/s]




.. GENERATED FROM PYTHON SOURCE LINES 188-192

Review a class
--------------

Select a class to review in the output.

.. GENERATED FROM PYTHON SOURCE LINES 192-208

.. code-block:: default


    review_class = 5

    # Map this image from the sorted selection back to the input
    # ``noisy_src``.

    # Report the identified neighbor indices with respect to the input
    # ``noise_src``.
    classes = avgs.class_indices[review_class]
    reflections = avgs.class_refl[review_class]
    logger.info(f"Class {review_class}'s neighors: {classes}")
    logger.info(f"Class {review_class}'s reflections: {reflections}")

    # The original image is the initial image in the class array.
    original_image_idx = classes[0]








.. GENERATED FROM PYTHON SOURCE LINES 209-210

Report the identified neighbors, original is the first image.

.. GENERATED FROM PYTHON SOURCE LINES 210-213

.. code-block:: default


    noisy_src.images[classes].show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_009.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 214-215

Display original image.

.. GENERATED FROM PYTHON SOURCE LINES 215-218

.. code-block:: default


    noisy_src.images[original_image_idx].show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_010.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 219-220

Display the averaged result

.. GENERATED FROM PYTHON SOURCE LINES 220-222

.. code-block:: default

    avgs.images[review_class].show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_011.png
   :alt: class averaging
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_011.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ?it/s]    100%|##########| 1/1 [00:00<00:00,  2.92it/s]    100%|##########| 1/1 [00:00<00:00,  2.92it/s]
      0%|          | 0/1 [00:00<?, ?it/s]    100%|##########| 1/1 [00:00<00:00, 21.00it/s]




.. GENERATED FROM PYTHON SOURCE LINES 223-229

Alignment Details
^^^^^^^^^^^^^^^^^

Alignment details are exposed when available from an underlying
``averager``.  In this case, we'll get the estimated alignments for
the ``review_class``.

.. GENERATED FROM PYTHON SOURCE LINES 229-275

.. code-block:: default



    est_rotations = avgs.averager.rotations
    est_shifts = avgs.averager.shifts
    est_correlations = avgs.averager.correlations

    logger.info(f"Estimated Rotations: {est_rotations}")
    logger.info(f"Estimated Shifts: {est_shifts}")
    logger.info(f"Estimated Correlations: {est_correlations}")

    # Compare the original unaligned images with the estimated alignment.
    # Get the indices from the classification results.
    nbr = 3
    original_img_0_idx = classes[0]
    original_img_nbr_idx = classes[nbr]

    # Lookup the images.
    original_img_0 = noisy_src.images[original_img_0_idx].asnumpy()[0]
    original_img_nbr = noisy_src.images[original_img_nbr_idx].asnumpy()[0]

    # Rotate using estimated rotations.
    angle = est_rotations[0, nbr] * 180 / np.pi
    if reflections[nbr]:
        logger.info("Reflection reported.")
        original_img_nbr = np.flipud(original_img_nbr)
    rotated_img_nbr = np.asarray(PILImage.fromarray(original_img_nbr).rotate(angle))

    plt.subplot(2, 2, 1)
    plt.title("Original Images")
    plt.imshow(original_img_0)
    plt.xlabel("Img 0")
    plt.subplot(2, 2, 2)
    plt.imshow(original_img_nbr)
    plt.xlabel(f"Img {nbr}")

    plt.subplot(2, 2, 3)
    plt.title("Est Rotation Applied")
    plt.imshow(original_img_0)
    plt.xlabel("Img 0")
    plt.subplot(2, 2, 4)
    plt.imshow(rotated_img_nbr)
    plt.xlabel(f"Img {nbr} rotated {angle:.4}*")
    plt.tight_layout()
    plt.show()





.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_012.png
   :alt: Original Images, Est Rotation Applied
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_class_averaging_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 276-288

ClassAvgSource Components
-------------------------
For more realistic simulations and experimental data,
ASPIRE provides a wholly customizable base ``ClassAvgSource``
class. This class expects a user to instantiate and provide
all components required for class averaging.

To make things easier a practical starting point
``DefaultClassAvgSource`` is provided which fills in reasonable
defaults based on what is available in the current ASPIRE-Python.
The defaults can be overridden simply by instantiating your own
instances of components and passing during initialization.

.. GENERATED FROM PYTHON SOURCE LINES 288-294

.. code-block:: default


    # Using the defaults requires only passing a source.
    # After understanding the various components that can be
    # combined in a ``ClassAvgSource``, they can be customized
    # or easily extended.
    avg_src = DefaultClassAvgSource(noisy_src)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  26.649 seconds)


.. _sphx_glr_download_auto_tutorials_tutorials_class_averaging.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: class_averaging.py <class_averaging.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: class_averaging.ipynb <class_averaging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
